; (size + allocated size + data ptr)
ARRAYLIST_LENGTH equ 4 + 4 + 4
; (size + data ptr)
ARRAYLIST_ALLOCATED_SIZE_OFFSET equ 4
ARRAYLIST_DATA_OFFSET equ 4 + 4
ARRAYLIST_DEFAULT_SIZE equ 10
ARRAYLIST_DEFAULT_DATA_LENGTH equ ARRAYLIST_DEFAULT_SIZE * 4

arraylist_new ptf ARRAYLIST_LENGTH ARRAYLIST_ALLOCATED_SIZE_OFFSET ARRAYLIST_DATA_OFFSET ARRAYLIST_DEFAULT_SIZE ARRAYLIST_DEFAULT_DATA_LENGTH
    arraylist pt ARRAYLIST_LENGTH{}
    set arraylist 0
    set arraylist+ARRAYLIST_ALLOCATED_SIZE_OFFSET ARRAYLIST_DEFAULT_SIZE
    dataBuffer pt ARRAYLIST_DEFAULT_DATA_LENGTH{}
    set arraylist+ARRAYLIST_DATA_OFFSET dataBuffer
    return arraylist
end

; args: arraylist, index, returns value
arraylist_get ptf ARRAYLIST_DATA_OFFSET
    return ([args + 4] << 2) + [[args]+ARRAYLIST_DATA_OFFSET]
end

; args: arraylist
arraylist_expand ptf ARRAYLIST_ALLOCATED_SIZE_OFFSET ARRAYLIST_DATA_OFFSET ARRAYLIST_DEFAULT_SIZE memcpy
    oldDataBuffer equ [[args]+ARRAYLIST_DATA_OFFSET]
    set arraylist+ARRAYLIST_ALLOCATED_SIZE_OFFSET [[args]+ARRAYLIST_ALLOCATED_SIZE_OFFSET]+ARRAYLIST_DEFAULT_SIZE
    newDataBuffer pt [[args]+ARRAYLIST_ALLOCATED_SIZE_OFFSET]{}
    memcpy jmp oldDataBuffer newDataBuffer [[args]] << 2
    del oldDataBuffer
    set arraylist+ARRAYLIST_DATA_OFFSET newDataBuffer
end

; args: arraylist, value
arraylist_add ptf ARRAYLIST_ALLOCATED_SIZE_OFFSET ARRAYLIST_DATA_OFFSET ARRAYLIST_DEFAULT_SIZE
    arraylist equ [args]
    conditional_expand lptf arraylist
        arraylist_expand jmp arraylist
    end
    set [arraylist+ARRAYLIST_DATA_OFFSET]+([arraylist] << 2) [args+4]
    set arraylist [arraylist]++
end

; args: arraylist, returns value
arraylist_poll ptf
    set [args] [args]--
    arraylist_get jmp [args]
    return equ return
end

arraylist_free ptf ARRAYLIST_DATA_OFFSET
    del [[args]+ARRAYLIST_DATA_OFFSET]
    del [args]
end

arraylist_deep_free ptf ARRAYLIST_DATA_OFFSET
    arraylist equ [args]
    dataBuffer lpt [arraylist+ARRAYLIST_DATA_OFFSET]
    cnt lpt [arraylist]
    loop lptf cnt dataBuffer
        del [dataBuffer]
        set cnt [cnt]--
    end
    loop while [cnt] > 0
    arraylist_free jmp arraylist
end

arraylist_copy ptf ARRAYLIST_LENGTH ARRAYLIST_ALLOCATED_SIZE_OFFSET ARRAYLIST_DATA_OFFSET
    newArrayList pt ARRAYLIST_LENGTH{}
    memcpy jmp [args] newArrayList ARRAYLIST_LENGTH
    len equ [newArrayList+ARRAYLIST_ALLOCATED_SIZE_OFFSET] << 2
    newDataBuffer pt len{}
    memcpy jmp [[args]+ARRAYLIST_DATA_OFFSET] newDataBuffer len
    return newArrayList
end
